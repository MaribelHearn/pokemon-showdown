#!/usr/bin/env node

try {
	RegExp("\\p{Emoji}", "u");
} catch (e) {
	console.log("We require Node.js version 10 or later; you're using " + process.version);
	process.exit(1);
}

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

function shell(cmd) {
	child_process.execSync(cmd, {stdio: 'inherit', cwd: __dirname});
}

function sucrase(src, out) {
	shell(`npx sucrase -q ${src} -d ${out} --transforms typescript,imports --enable-legacy-typescript-module-interop`);
}

// TODO: switch to async approach with bounded number of open files.
function replace(regex, replacement, file) {
	var stats = fs.lstatSync(file);
	if (stats.isSymbolicLink()) return;
	if (stats.isFile()) {
		var text = fs.readFileSync(file, "utf-8");
		var match = text.match(regex);
		if (!match) return;
		fs.writeFileSync(file, text.replace(regex, replacement));
	} else if (stats.isDirectory()) {
		var files = fs.readdirSync(file);
		for (var i = 0; i < files.length; i++) {
			replace(regex, replacement, path.join(file, files[i]));
		}
	}
}

function rewrite(src, out, dist) {
	replace(new RegExp(`(require\\\(.*?)(${src})(.*?\\\))`), `$1${out}$3`, path.join(__dirname, dist));
}

try {
	require.resolve('sucrase');
} catch (e) {
	console.log('Installing dependencies...');
	shell('npm install');
}

sucrase('./sim', './.sim-dist');
sucrase('./lib', './.lib-dist');
rewrite('lib', '.lib-dist', '.sim-dist');

// Make sure config.js exists. If not, copy it over synchronously from
// config-example.js, since it's needed before we can start the server
try {
	require.resolve('./config/config');
} catch (err) {
	if (err.code !== 'MODULE_NOT_FOUND') throw err; // should never happen

	console.log('config.js does not exist. Creating one with default settings...');
	fs.writeFileSync(
		path.resolve(__dirname, 'config/config.js'),
		fs.readFileSync(path.resolve(__dirname, 'config/config-example.js'))
	);
}
